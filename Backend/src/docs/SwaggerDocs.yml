openapi: 3.0.0
info: 
  title: Task Dashboard API
  description: |
    API to query users, tasks, and continuously run health checks to ensure container is healthy,
    also adds data into database.
servers:
  - url: http://localhost:3000
    description: Server bind locally into port 3000.
paths:
  /user:
    description: API Users
    get:
      tags:
        - Users
      summary: Queries Users from the database
      operationId: getAllUsers
      description: |
        Queries from the postgresql database. Returns all users from it.
        For example: {firstName: 'Test1', userName: 'Test1'... }. 
      responses:
        "200":
          description: A JSON array of User objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
      operatonId: getUserById
      description: |
        Queries from the postgresql database. Returns user that is equal to the ID parameter.
        For Example: {firstName: 'Test1', userName: 'Test1'... }.
      responses:
        "200":
          description: A User Object
          content:
            application/json:
              schema:
                type: string
        "400":
          description: User ID is not provided. Bad Request.
        "500":
          description: Failed to fetch user. Internal Server Error
    post:
      tags:
        - Users
      summary: Adds User data into the Database
      operationId: registerUser
      description: | 
        Registers user and add every data needed into the database
        For example: firstName, lastName, userName, userPassword, userEmail
      resopnses: 
        "201":
          description: Created, Register has been successfull.
        "403":
          description: User Already Exists. Forbidden.
        "500":
          description: Failed to register User. Internal Server Error.
      operationId: loginUser
      description: Login Users and validates from the database if user credentials are equal to the data in database.
      responses:
        "200":
          description: Login Successful. Returns jwt token for authentication
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Invalid Credentials. Unauthorized
        "500":
          description: Server configuration error. No JWT_Secrets in .env
        "500":
          description: Failed to login user. Internal Server Error.
  /health:
    description: API Health
    get:
      tags:
        - Health
      summary: Health status
      operationId: checkHealth
      description: |
        If the API is healthy, respond to request
        with a healthy status message
      responses:
        '200':
          description: Task API is healthy
        '500':
          description: Internal server error
