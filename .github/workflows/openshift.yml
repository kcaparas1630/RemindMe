name: OpenShift CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  openshift-ci-cd:
    name: Build and deploy to OpenShift
    runs-on: ubuntu-20.04
    environment: production

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const secrets = {
            OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
            OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
          };

          const GHCR = "ghcr.io";
          if (`${{ secrets.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
            core.info(`Image registry is ${GHCR} - no registry password required`);
          }
          else {
            core.info("A registry password is required");
            secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
          }

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`✅ All the required secrets are set`);
          }
    
    # Debug Pipeline
    - name: Check environment variables
      run: |
        echo "Registry: ${{ secrets.IMAGE_REGISTRY }}"
        echo "Username: ${{ secrets.IMAGE_REGISTRY_USER }}"


    - name: Check out repository
      uses: actions/checkout@v4

    - name: Determine app name
      if: env.APP_NAME == ''
      run: |
        echo "APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV

    - name: Determine image tags
      if: env.IMAGE_TAGS == ''
      run: |
        echo "IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV

    # Build Database image
    - name: Build Database image
      id: build-database-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ secrets.APP_NAME }}-database
        tags: ${{ env.IMAGE_TAGS }}
        dockerfiles: |
          ./Database/Dockerfile

    # Build Backend image
    - name: Build Backend image
      id: build-backend-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ secrets.APP_NAME }}-backend
        tags: ${{ env.IMAGE_TAGS }}
        dockerfiles: |
          ./Backend/Dockerfile

    # Push Database image
    - name: Push Database image to registry
      id: push-database-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-database-image.outputs.image }}
        tags: ${{ steps.build-database-image.outputs.tags }}
        registry: ${{ secrets.IMAGE_REGISTRY }}
        username: ${{ secrets.IMAGE_REGISTRY_USER }}
        password: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}

    # Push Backend image
    - name: Push Backend image to registry
      id: push-backend-image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-backend-image.outputs.image }}
        tags: ${{ steps.build-backend-image.outputs.tags }}
        registry: ${{ secrets.IMAGE_REGISTRY }}
        username: ${{ secrets.IMAGE_REGISTRY_USER }}
        password: ${{ secrets.IMAGE_REGISTRY_PASSWORD }}

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

    - name: Log in to OpenShift
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
        insecure_skip_tls_verify: true
        namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}

    # Deploy Database
    - name: Create and expose Database app
      id: deploy-and-expose-database
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: ${{ env.APP_NAME }}-database
        image: ${{ steps.push-database-image.outputs.registry-path }}
        namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
        port: ${{ secrets.DATABASE_PORT }}

    # Deploy Backend
    - name: Create and expose Backend app
      id: deploy-and-expose-backend
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: ${{ secrets.APP_NAME }}-backend
        image: ${{ steps.push-backend-image.outputs.registry-path }}
        namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
        port: ${{ secrets.APP_PORT }}

    - name: Print application URLs
      env:
        DATABASE_ROUTE: ${{ steps.deploy-and-expose-database.outputs.route }}
        BACKEND_ROUTE: ${{ steps.deploy-and-expose-backend.outputs.route }}
        DATABASE_SELECTOR: ${{ steps.deploy-and-expose-database.outputs.selector }}
        BACKEND_SELECTOR: ${{ steps.deploy-and-expose-backend.outputs.selector }}
      run: |
        echo "======================== Your applications are available at: ========================"
        echo "Database: ${{ env.DATABASE_ROUTE }}"
        echo "Backend: ${{ env.BACKEND_ROUTE }}"
        echo "==================================================================================="
        echo
        echo "Your apps can be taken down with:"
        echo "Database: \"oc delete all --selector='${{ env.DATABASE_SELECTOR }}'\""
        echo "Backend: \"oc delete all --selector='${{ env.BACKEND_SELECTOR }}'\""
